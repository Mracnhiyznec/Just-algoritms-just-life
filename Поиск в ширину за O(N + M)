#include <iostream>
#include <vector>
#include <queue>
using namespace std;
typedef long long ll;
int main(){
    // Вводим количество вершин и ребер графа соответсвенно
    int vertex, edge;
    // Когда будем вводим ребра понадобятся переменные, чтобы передавать их в граф
    int from, in;
    cin >> vertex >> edge;
    // Задаем граф, вершины нумеруются с нуля(предполагается что пользователь это знает), граф задан списком смежности
    vector<vector<int>> graph(vertex);
    for (int i = 0; i < edge; i++){
        cin >> from >> in;
        graph[from].push_back(in);
        graph[in].push_back(from);
    }
    // Стартовая вершина
    int start_vert;
    cin >> start_vert;
    // Очередь для алгоритма
    queue<int> q;
    // Массив в котором отмечается были в этой вершине или нет
    vector<bool> was(vertex);
    // Массив дистанций от начальной вершины до всех
    vector<int> distance(vertex, 0);
    // Массив предков
    vector<int> pred(vertex);
    // В стартовую вершину мы зашли поэтому ее пометили и добавили очередь и эта единственная вершина у которой нет предка, поэтому поставим туда -1
    was[start_vert] = true;
    q.push(start_vert);
    pred[start_vert] = -1;
    // В очереди хранятся те вершины, от которых мы еще должны поджечь соседей
    while (!q.empty()){
        // Вершина соседей от которых мы сейчас смотрим
        int ver_now = q.front();
        q.pop();
        for (size_t i = 0; i < graph[ver_now].size(); i++){
            int to = graph[ver_now][i];
            if (!was[to]){
                was[to] = true;
                q.push(to);
                distance[to] = distance[ver_now] + 1;
                pred[to] = ver_now;
            }
        }
    }
    cout << "\n";
    for (int i = 0; i < vertex; i++){
        // Если были в этой вершине значит путь существует и можем выводить его длину
        if (was[i]){
            cout << i << " " << distance[i] << "\n";
        }
        else{
            cout << i << " " << "No path\n";
        }
    }
    // Если хотим вывести сам путь
    for (int i = 0; i < vertex; i++){
        // Если не посещали, значит пути вообще нет из стартовой вершины
        if (!was[i]){
            cout << i << " " << "No path\n";
        }
        else{
            // Иначе заводим вектор, который хранит путь
            vector<int> path;
            // Пока не прришли в стартовую добавляем в путь
            for (int v = i; v != -1; v = pred[v]){
                path.push_back(v);
            }
            // Переворачиваем чтобы получить прямой порядок и выводим путь для каждой конкретной вершины(они нумеруются с 0)
            reverse(path.begin(), path.end());
            cout << "Path " << i << " :";
            for (size_t j = 0; j < path.size(); j++){
                cout << path[j] << " ";
            }
            cout << "\n";
        }
    }
    return 0;
}
