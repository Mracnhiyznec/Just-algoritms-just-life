#include <iostream>
#include <vector>
using namespace std;
typedef long long ll;
// Константа чтобы чтобы задать начальное расстояние до всех вершин и в дальнейшем понадобится для того чтобы узнать, что до вершины нельзя добраться впринципе
const int INF = 1000000000;
int main(){
    // Задаем количество вершин и ребер в графе
    int peaks, edge;
    // from - вершина откуда идет ребро, to - куда, weight - вес ребра
    int from, to, weight;
    cin >> peaks >> edge;
    /* Задаем граф списком смежности. Для каждой вершины ver список graph[ver] содержит список ребер исходящих из этой вершины, т.е
     * список пар, pair<int, int>, где первый элемент пары - вершина, в которую ведет ребро, а второй элемент - вес ребра.
     */
    vector<vector<pair<int, int>>> graph(peaks);
    for (int i = 0; i < edge; i++){
        cin >> from >> to >> weight;
        graph[from].push_back({to, weight});
        graph[to].push_back({from, weight});
    }
    // Стартовая вершина, из которой мы хотим посчитать минимальное расстояние до всех остальных
    int start_peak;
    cin >> start_peak;
    // Вектор Дейкстра содержит минимальное расстояние до всех вершин от стартовой, изначально все расстояния равны бесконечности
    vector<int> deikstra(peaks, INF);
    // Вектор предков для каждой вершины, там будет хранится для каждой вершины v, вершина v_i из которой мы пришли в v, по кратчайшему пути в v
    vector<int> ancestor(peaks);
    // Минимальное расстояние от стартовой до стартовой вершины равно нулю, так как отрицательных ребер
    deikstra[start_peak] = 0;
    // Вектор в котором хранится, нашли ли мы уже минимальное расстояние до вершины i или нет
    vector<bool> was(peaks);
    for (int v = 0; v < peaks; v++){
        // Вершина которую просматриваем сейчас, поставили -1, чтобы сразу зайти в следующее условие, то взять первую вершину
        int v_now = -1;
        // Здесь отметим, что мы рассчитываем на то, что пользователь нумерует вершины с 0 до n - 1
        for (int j = 0; j < peaks; j++){
            // Ищем подходящую вершину
            if (!was[j] && (v_now == -1 || deikstra[j] < deikstra[v_now])){
                v_now = j;
            }
        }
        // Если расстояние до найденной вершины бесконечность, значит до нее невозвожно добраться, получается мы все что можно уже нашли, можно выходить из цикла
        if (deikstra[v_now] == INF){
            break;
        }
        // Помечаем вершину
        was[v_now] = true;
        // Выполняем релаксации из вершины
        for (size_t j = 0; j < graph[v_now].size(); j++){
            int tov = graph[v_now][j].first;
            int len = graph[v_now][j].second;
            if (deikstra[v_now] + len < deikstra[tov]){
                deikstra[tov] = deikstra[v_now] + len;
                ancestor[tov] = v_now;
            }
        }
    }
    // Выводим минимальные расстояние до вершин
    for (int i = 0; i < peaks; i++){
        cout << deikstra[i] << " ";
    }
    cout << '\n';
    // Выводим кратчайший путь по вершинам для каждой из них
    for (int i = 0; i < peaks; i++) {
        cout << i << ": ";
        vector<int> path;
        // Восстанавливаем путь, используя массив предков
        for (int v = i; v != start_peak; v = ancestor[v]){
            path.push_back(v);
        }
        // Добавляем саму стартовую вершину
        path.push_back(start_peak);
        // Переворачиваем наш путь чтобы он был в правильном порядке
        reverse(path.begin(), path.end());
        for (int j = 0; j < path.size(); j++){
            cout << path[j] << " ";
        }
        cout << '\n';
    }
    return 0;
}
