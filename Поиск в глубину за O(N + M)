#include <iostream>
#include <vector>
#include <queue>
using namespace std;
typedef long long ll;
// Заводим количество вершин и ребер в графе, вершины номеруются с нуля
int vertex, edge;
int in, from;
// Сам граф, здесь задан списком смежности
vector<vector<int>> graph;
// Массив в котором храним цвет каждой вершины. 0 - еще не обработали, 1 - обрабатываем, 2 - уже обработали
vector<int> color;
// Время входа в каждую вершину
vector<int> time_in;
// Время выхода из каждой вершины
vector<int> time_out;
// Таймер для определения времен
int dfs_timer = 0;
void dfs(int v){
    time_in[v] = dfs_timer++;
    color[v] = 1;
    for (auto c: graph[v]){
        if (color[c] == 0){
            dfs(c);
        }
    }
    color[v] = 2;
    time_out[v] = dfs_timer++;
}
int main(){
    // Делаем правильные размеры массивов
    cin >> vertex >> edge;
    graph.resize(vertex);
    // Задаем граф списком смежности
    for (int i = 0; i < edge; i++){
        cin >> from >> in;
        graph[from].push_back(in);
        graph[in].push_back(from);
    }
    color.resize(vertex);
    time_in.resize(vertex);
    time_out.resize(vertex);
    int start;
    cin >> start;
    dfs(start);
    for (auto c: color){
        cout << c << " ";
    }
    return 0;
}
